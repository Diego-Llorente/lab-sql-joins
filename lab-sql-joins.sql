USE sakila;
#1. List the number of films per category.
SELECT c.name AS category_name, COUNT(fc.film_id) AS number_of_films
FROM category AS c
INNER JOIN film_category AS fc
ON fc.category_id = c.category_id
GROUP BY fc.category_id;

#2. Retrieve the store ID, city, and country for each store.
SELECT 
    s.store_id, c.city, co.country
FROM
    store AS s
        INNER JOIN
    address AS ad ON s.address_id = ad.address_id
        INNER JOIN
    city AS c ON ad.city_id = c.city_id
        INNER JOIN
    COUNTRY AS co ON co.country_id = c.country_id;


#3. Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM staff AS s
INNER JOIN payment AS p
ON s.staff_id = p.staff_id
GROUP BY s.store_id;


#4. Determine the average running time of films for each category.
select * from film; #length, film_id
select* from film_category; #film_id, category_id
select * from category; #category_id, name

SELECT c.name AS category, ROUND(AVG(f.length), 2) AS avg_running_time 
FROM film AS f
INNER JOIN film_category AS fc
ON f.film_id = fc.film_id
INNER JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY c.name;

#Bonus:
#5. Identify the film categories with the longest average running time.
SELECT c.name AS category, AVG(f.length) AS avg_running_time 
FROM film AS f
INNER JOIN film_category AS fc
ON f.film_id = fc.film_id
INNER JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY avg_running_time DESC;


#6. Display the top 10 most frequently rented movies in descending order.
select * from film; #title, film_id
select * from rental; #rental_id (count), inventory_id
select * from inventory; #inventory_id, film_id

SELECT f.title, COUNT(r.rental_id) AS times_rented
FROM film AS f
INNER JOIN inventory as i
ON f.film_id = i.film_id
INNER JOIN rental AS r
on i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY times_rented DESC
LIMIT 10;


#7. Determine if "Academy Dinosaur" can be rented from Store 1.
select * from film; #film_id, film_title
select * from inventory; #film_id, store_id

SELECT i.store_id, f.title
FROM inventory AS i
INNER JOIN film AS f
ON i.film_id = f.film_id
WHERE f.title = "Academy Dinosaur" 
GROUP BY i.store_id;
#YES, it can be rented in store 1.


#8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
#Include a column indicating whether each title is 'Available' or 'NOT available.' 
#Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

select * from film; #title, film_id
select * from inventory; #film_id,

SELECT DISTINCT f.title,
CASE
WHEN IFNULL(i.inventory_id, 0) = 0 THEN "NOT available"
ELSE "Available"
END AS film_availability
FROM film AS f
LEFT JOIN inventory AS i
ON f.film_id = i.film_id
ORDER BY f.title;